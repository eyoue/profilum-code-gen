import { Component, OnDestroy, OnInit } from '@angular/core';
import { Meta } from '@angular/platform-browser';
import { Registration<%= classify(name) %>Service } from '../registration-<%= name %>/registration-<%= name %>.service';
import { NavigationEnd, Router, ActivatedRoute } from '@angular/router';
import { HttpClientJsonpModule, HttpClientModule, HttpClient } from '@angular/common/http';
import { take } from 'rxjs/operators';


@Component({
  selector: 'prf-tokenauth-<%= name %>',
  templateUrl: './tokenauth-<%= name %>.component.html',
  styleUrls: ['./tokenauth-<%= name %>.component.scss']
})
export class Tokenauth<%= classify(name) %>Component implements OnInit {
  queryParams: any;
  accessToken: any;
  tokenFailed: boolean = false;
  showMessage: boolean = false;
  alertMessage: string = '';

  buttonWaiting: boolean = false;
  buttonActivated: boolean = false;
  buttonActivate: boolean = false;

  constructor(private meta: Meta,
    private router: Router,
    private route: ActivatedRoute,
    private registrationService: Registration<%= classify(name) %>Service,
    private loginService: Login<%= classify(name) %>Service,
    private currentStepService: CurrentStepService,
    private sharedService: SharedService,
    private changePasswordService: ChangePasswordService,
    private projectVariables: ProjectVariables,
    private overlayService: OverlayBusyService
  ) { }

  async ngOnInit() {
    this.overlayService.show();
    this.queryParams = this.route.snapshot.queryParams;
    this.accessToken = this.queryParams['accessToken'];

    if (this.accessToken && this.accessToken != '') {
      let loginResult = await this.loginService.tokenLogin(this.accessToken);

      // логика идентичная компоненту login
      if (loginResult.succeeded === false) {
        this.tokenFailed = true;
        this.showMessage = true;
        this.alertMessage = 'Токен неверный';
      } else {
        localStorage.clear();
        try {
          let ui: UserInfoClass = await this.sharedService.getUserInfo();
          localStorage.setItem('imagePath', ui.imagePath);
          localStorage.setItem('firstName', ui.firstName);
          localStorage.setItem('lastName', ui.lastName);
          localStorage.setItem('schoolId', ui.schoolId);
          localStorage.setItem('userGender', ui.gender);
        } catch (error) {
          // У главного админа нет профиля
        }
        localStorage.setItem('userRole', loginResult.role);
        localStorage.setItem('userId', loginResult.userId);
        localStorage.setItem('isAuthorized', 'true');

        switch (loginResult.role) {
          case 'admin': {
            this.router.navigate(['/admin/schools']);
            return;
          }
          case 'cityadmin': {
            this.router.navigate(['/cityadmin']);
            return;
          }
          case 'adminDO': {
            this.router.navigate(['/adminDO/courses/all-courses']);
            return;
          }
          case 'schooladmin': {
            this.router.navigate(['/schooladmin/classes']);
            return;
          }
          case 'director': {
            this.router.navigate(['/director']);
            return;
          }
          case 'teacher': {
            this.router.navigate(['/teacher']);
            return;
          }
          case 'parent': {
            this.router.navigate(['/parent']);
            return;
          }
          case 'pupil': {
            this.router.navigate(['/pupil']);
          }
        }

        const welcomeStep = await this.currentStepService.getCurrentStep();
        localStorage.setItem('welcomeStep', welcomeStep);

        let reqHandler = this.changePasswordService.getUserSession(loginResult.userId)
        .pipe(take(1))
        .subscribe((data) => {
          let sessionId = data.status == 'Success' || 'Uncompleted test' ? data.sessionId : undefined;
          if (sessionId) {
            localStorage.setItem('testSessionId', sessionId);
            localStorage.setItem('sessionStatus', data.status);
            if (loginResult.tag == PrEventsEnums[PrEventsEnums.Marathon]) {
              localStorage.setItem('promoTag', loginResult.tag);  // метка для определения участия пользователя в промо акции
              return this.router.navigate(['/results-marathon', sessionId]);
            }
            this.router.navigate(['/pupil']);
          } else if (data.status == 'Untested user') {
            this.router.navigate(['/test-na-professiyu']);
          }
        });
        this.removeWaiting();
      }
    } else {
      this.showMessage = true;
      this.alertMessage = 'Нет токена в URL';
    }
    this.overlayService.hide();
  }

  animateLogin() {
    this.buttonActivate = true;
    this.buttonWaiting = true;
  }

  removeWaiting() {
    this.buttonWaiting = false;
    this.buttonActivated = true;
    this.overlayService.hide();
  }

  failWaiting() {
    this.buttonWaiting = false;
    this.buttonActivate = false;
    this.overlayService.hide();
  }

}
