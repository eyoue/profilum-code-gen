import { Component, OnInit, ElementRef, ViewChild, HostListener } from '@angular/core';
import { Meta, MetaDefinition} from '@angular/platform-browser';
import { Registration<%= classify(name) %>Service } from '../registration-<%= name %>.service';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { environment } from 'environments/environment';
import { Metrika } from 'ng-yandex-metrika';

@Component({
  selector: 'prf-open-registration-<%= name %>',
  templateUrl: './open-registration-<%= name %>.component.html',
  styleUrls: ['./open-registration-<%= name %>.component.scss']
})
export class OpenRegistration<%= classify(name) %>Component extends RegistrationBase<Registration<%= classify(name) %>Service> {
  public personalTerms: boolean = false;
  public advertisingTerms: boolean = false;
  public duplicateUserName: boolean = false;
  public mask = [
    '+',
    '7',
    ' ',
    '(',
    /[1-9]/,
    /\d/,
    /\d/,
    ')',
    ' ',
    /\d/,
    /\d/,
    /\d/,
    '-',
    /\d/,
    /\d/,
    '-',
    /\d/,
    /\d/,
  ];

  constructor(
    registrationService: Registration<%= classify(name) %>Service,
    router: Router,
    fb: FormBuilder,
    regionsService: RegionsService,
    childrenAddService: ChildrenAddService,
    filterSchoolsPipe: FilterSchoolsPipe,
    filterByNamePipe: FilterByNamePipe,
    translateService: TranslateService,
    adminPanelService: AdminPanelService,
    metrika: Metrika,
    appSettingsService: AppSettingsService,
    private meta: Meta,
    private activatedRoute: ActivatedRoute
  ) {
    super(
      registrationService,
      router,
      fb,
      regionsService,
      childrenAddService,
      filterSchoolsPipe,
      filterByNamePipe,
      translateService,
      adminPanelService,
      metrika,
      appSettingsService,
      'parent'
    );
    const componentName: MetaDefinition = {
      name: 'profliner:title',
      content: 'Open Registration',
    };
    this.meta.addTag(componentName);
  }

  async ngOnInit() {
    super.ngOnInit();
    // Check Tag in URL
    if (!this.tag) {
      this.activatedRoute.queryParams.subscribe(params => {
        this.tag = params.tag;
      });
      // Check if we have this tag type in system
      if (this.tag != PrEventsEnums.Emailing.toString()) {
        this.tag = null;
      }
    }
  }

  protected initFormGroup() {
    this.form = this.fb.group({
      lastName: new FormControl(null, [Validators.required]),
      firstName: new FormControl(null, [Validators.required]),
      middleName: new FormControl(null, [Validators.required]),
      phone: new FormControl(null, [
        Validators.maxLength(18),
        Validators.pattern(this.phoneRegExp),
      ]),
      region: new FormControl(null, [Validators.required]),
      city: new FormControl(null, [Validators.required]),
      email: new FormControl(null, [Validators.required, Validators.pattern(this.emailRegExp)]),
      password: new FormControl(null, [Validators.required]),
      role: new FormControl(this.role, [Validators.required]),
    });
  }

  get isClassSelected() {
    return true;
  }

  public submit() {
    this.submitted = true;
    if (this.form.valid) {
      const credentials = {
        email: this.f.email.value,
        lastName: this.f.lastName.value,
        firstName: this.f.firstName.value,
        middleName: this.f.middleName.value,
        password: this.f.password.value,
        phoneNumber: this.f.phone.value,
        regionId: this.f.city.value.regionId,
        municipalityId: this.f.city.value.municipalityId,
        city: this.f.city.value.data.name,
        role: this.f.role.value,
        tag: this.tag,
        isConsentToMailing: this.advertisingTerms,
      };
      this.registrationFailed = false;
      this.passFailed = false;
      this.duplicateUserName = false;
      this.registrationService.openregistration(credentials).subscribe(response => {
        if (response) {
          if (response.userId == undefined || response.userId == null) {
            this.duplicateUserName = response.status = !!'Registration failed'; // почта занята
            this.registrationFailed = true; // ошибка регистрации
            this.failWaiting();
          } else {
            if (environment.analytics) {
              if (this.tag) {
                this.metrika.fireEvent('PARTNER_EMAIL_REGISTRATION');
              }
              this.metrika.fireEvent('PARENT_REG');
            }
            // Сразу попадаем в ЛК
            this.registrationService
              .login(credentials.email, credentials.password, false)
              .subscribe(loginResult => {
                if (loginResult) {
                  if (loginResult.succeeded === false) {
                    this.loginFailed = true;
                    this.passFailed = true;
                    return;
                  } else {
                    localStorage.setItem('userRole', loginResult.role);
                    localStorage.setItem('userId', loginResult.userId);
                    localStorage.setItem('isAuthorized', 'true');
                    switch (loginResult.role) {
                      case 'parent': {
                        return this.router.navigate(['/parent']);
                      }
                    }
                  }
                }
              });
            this.removeWaiting();
          }
        }
      });
    } else {
      this.failWaiting();
    }
  }
}
