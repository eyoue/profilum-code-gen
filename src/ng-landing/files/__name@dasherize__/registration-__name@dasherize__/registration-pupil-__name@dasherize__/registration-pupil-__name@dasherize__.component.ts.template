import { Component, ElementRef, HostListener, Input, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { Registration<%= classify(name) %>Service } from '../registration-<%= name %>.service';
import { Router } from '@angular/router';
import * as moment from 'moment';
import { Metrika } from 'ng-yandex-metrika';

@Component({
  selector: 'prf-registration-pupil-<%= name %>',
  templateUrl: './registration-pupil-<%= name %>.component.html',
  styleUrls: ['./registration-pupil-<%= name %>.component.scss']
})

export class RegistrationPupil<%= classify(name) %>Component implements OnInit {
  @Input() tag: string;
  public form: FormGroup;
  public submitted: boolean;
  public readonly dateMask = [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];
  public readonly emailRegExp: RegExp = REG_EXP.emailRegExp;
  public readonly dateRegExp: RegExp = REG_EXP.dateRegExp;
  public readonly testOneLetter: RegExp = REG_EXP.testOneLetter;
  public readonly testOneDigit: RegExp = REG_EXP.testOneDigit;
  public readonly testSixCharter: RegExp = REG_EXP.testSixCharter;
  public readonly testWhiteSpace: RegExp = REG_EXP.testWhiteSpace;
  public readonly testRusLetters: RegExp = REG_EXP.testRusLetters;

  public isCharactersError: boolean = true;
  public isLetterError: boolean = true;
  public isNumberError: boolean = true;
  public isRusLettersError: boolean = false;
  public isWhiteSpaceError: boolean = false;

  public isNotValidPassword: boolean = false;

  public focusOutPasswordErrors: boolean = false;

  public addition: boolean = false;

  public schoolID: string = '';

  public regions: IRegion[] = [];

  public cities: ICity[] = [];
  public regionCities: ICity[] = [];

  public classes: SchoolClassesClass[] = [];

  public numbersClass: any = SCHOOL_NUMBERS;
  public lettersClass: any = SCHOOL_LETTERS;

  public selectedRegion: IRegion;
  public selectedCity: ICity;

  public selectedSchoolName: any;
  public selectedSchoolClassName: any;
  public selectedNumber: any;
  public selectedLetter: any;
  public schools: any[] = [];
  public schoolsFiltered: any[] = [];

  public registrationFailed: boolean = false;
  public passFailed: boolean = false;
  public loginFailed: boolean = false;

  public moment: any = moment;
  public buttonWaiting: boolean = false;
  public buttonActivated: boolean = false;
  public buttonActivate: boolean = false;
  public isMaskedPassword: boolean = true;
  public personalTerms: boolean = false;
  public duplicateUserName: boolean = false;
  public checkEmail: boolean = true;
  public checkBirthday: boolean = false;
  public isClasses: boolean = false;

  public searchRegionName: string;
  public searchCityName: string;
  public searchSchoolName: string;

  public isNotEnoughYears: boolean = false; // признак для определения разрешенного возраста
  private minAge: number = 14; // минимальный разрешенный возраст для регистрации ученика

  @ViewChild('regionFilter') public readonly regionFilter: ElementRef;
  @ViewChild('regionDrop') public readonly regionDrop: ElementRef;
  @ViewChild('regionField') public readonly regionField: ElementRef;

  @ViewChild('cityFilter') public readonly cityFilter: ElementRef;
  @ViewChild('cityDrop') public readonly cityDrop: ElementRef;
  @ViewChild('cityField') public readonly cityField: ElementRef;

  @ViewChild('schoolFilter') public readonly schoolFilter: ElementRef;
  @ViewChild('schoolDrop') public readonly schoolDrop: ElementRef;
  @ViewChild('schoolField') public readonly schoolField: ElementRef;

  @ViewChild('numberFilter') public readonly numberFilter: ElementRef;
  @ViewChild('numberDrop') public readonly numberDrop: ElementRef;
  @ViewChild('numberField') public readonly numberField: ElementRef;

  @ViewChild('letterFilter') public readonly letterFilter: ElementRef;
  @ViewChild('letterDrop') public readonly letterDrop: ElementRef;
  @ViewChild('letterField') public readonly letterField: ElementRef;

  @ViewChild('classesFilter') public readonly classesFilter: ElementRef;
  @ViewChild('classesDrop') public readonly classesDrop: ElementRef;
  @ViewChild('classesField') public readonly classesField: ElementRef;


  constructor(private registrationService: Registration<%= classify(name) %>Service,
    private router: Router,
    private fb: FormBuilder,
    private regionsService: RegionsService,
    private childrenAddService: ChildrenAddService,
    private filterSchoolsPipe: FilterSchoolsPipe,
    private filterByNamePipe: FilterByNamePipe,
    private adminPanelService: AdminPanelService,
    private metrika: Metrika) {
    this.moment = moment;
    this.moment.locale('ru');
  }

  async ngOnInit() {
    this.initFormGroup();

    await this.getRegions();
    await this.getCities();
    await this.getSchools();
  }

  private initFormGroup() {
    this.form = this.fb.group({
      lastName: new FormControl(null, [
        Validators.required,
      ]),
      firstName: new FormControl(null, [
        Validators.required,
      ]),
      middleName: new FormControl(null, [
        Validators.required,
      ]),
      date: new FormControl(null, [
        Validators.required,
        Validators.pattern(this.dateRegExp)
      ]),
      email: new FormControl(null, [
        Validators.required,
        Validators.pattern(this.emailRegExp),
      ]),
      password: new FormControl(null, [
        Validators.required,
        // Validators.pattern(this.passwordRegExp),
      ]),
      role: new FormControl('pupil', [
        Validators.required
      ]),
      region: new FormControl(null, [
        Validators.required
      ]),
      city: new FormControl(null, [
        Validators.required
      ]),
      school: new FormControl(null, [
        Validators.required
      ]),
      schoolClassNumber: new FormControl(null, [
        Validators.required
      ]),
      schoolClassLetter: new FormControl(null, [
        Validators.required
      ]),
      gender: new FormControl('M', [
        Validators.required
      ]),
      personalTerms: new FormControl(this.personalTerms = true, [
        Validators.required
      ]),
      schoolClass: new FormControl(null, [])
    });
  }

  get f() {
    return this.form.controls;
  }

  async getRegions() {
    this.regions = (await this.regionsService.getAllRegions()).filter(x => x.hrid != 'defaultRegion');
  }

  async getCities() {
    this.cities = await this.adminPanelService.getAllCities();
  }

  async getSchools() {
    const schools = await this.childrenAddService.getCatalogSchools();
    schools.forEach((school) => {
      this.schools.push({ city: school.city, value: school.number, viewValue: school.number, id: school.id });
    });
    // default state
    this.schoolsFiltered = this.schools;
  }

  async getSchoolClassBySchool(id) {
    let schoolClasses = await this.registrationService.getSchoolClassesBySchool(id);
    this.isClasses = schoolClasses.length > 0;
    this.classes = schoolClasses;
  }

  public toggleMask() {
    this.isMaskedPassword = !this.isMaskedPassword;
  }

  submit() {
    this.submitted = true;
    if (this.form.valid && this.personalTerms) {
      const credentials = {
        city: this.selectedCity.name,
        regionId: this.selectedCity.regionId,
        municipalityId: this.selectedCity.municipalityId,
        birthday: moment(this.f.date.value, 'DD/MM/YYYY', true).format('YYYY-MM-DD'),
        email: this.f.email.value,
        lastName: this.f.lastName.value,
        firstName: this.f.firstName.value,
        middleName: this.f.middleName.value,
        password: this.f.password.value,
        role: this.f.role.value,
        gender: this.f.gender.value,
        schoolId: this.schoolID,
        schoolClassLetter: this.f.schoolClassLetter.value,
        schoolClassNumber: this.f.schoolClassNumber.value,
        tag: this.tag
      };
      if (credentials) {
        this.registrationFailed = false;
        this.passFailed = false;
        this.registrationService.openregistration(credentials).subscribe((response) => {
          if (response) {
            if (response.userId == undefined || response.userId == null) {
              this.duplicateUserName = response.status = !!'Registration failed'; // почта занята
              this.registrationFailed = true; // ошибка регистрации
              this.failWaiting()
            } else {
              if (environment.analytics) {
                if (this.tag) {
                  this.metrika.fireEvent('PARTNER_EMAIL_REGISTRATION');
                }
                this.metrika.fireEvent('PUPIL_REG');
              }
              // Сразу попадаем в ЛК
              this.registrationService.login(credentials.email, credentials.password, false).subscribe((loginResult) => {
                if (loginResult) {
                  if (loginResult.succeeded === false) {
                    this.loginFailed = true;
                    this.passFailed = true;
                    return;
                  } else {
                    localStorage.setItem('userRole', loginResult.role);
                    localStorage.setItem('userId', loginResult.userId);
                    localStorage.setItem('isAuthorized', 'true');
                    switch (loginResult.role) {
                      case 'pupil': {
                        return this.router.navigate(['/pupil']);
                      }
                    }
                  }
                }
              });
              this.removeWaiting()
            }
          }
        });
      }
    } else {
      this.failWaiting();
    }
  }

  public checkBirthdayDate(isCorrectDate: boolean) {
    let date = moment();
    let userDate = moment(this.f.date.value, 'DD/MM/YYYY', true); // порядок определен форматом даты на фронте
    let diff = moment.duration(date.diff(userDate)).asYears();
    this.isNotEnoughYears = diff < this.minAge;
  }

  animateLogin() {
    this.buttonActivate = true;
    this.buttonWaiting = true;
    this.submit();
  }

  removeWaiting() {
    this.buttonWaiting = false;
    this.buttonActivated = true;
  }

  failWaiting() {
    this.buttonWaiting = false;
    this.buttonActivate = false;
  }

  public isAccessAllowed() {
    return this.f.lastName.value
      && this.f.firstName.value
      && this.f.middleName.value
      && this.f.region.value && this.selectedRegion
      && this.f.city.value && this.selectedCity
      && this.f.school.value && this.schoolID
      && this.f.schoolClassNumber.value
      && this.f.schoolClassLetter.value
      && this.isValidEmail(this.f.email.value)
      && this.isValidPassword(this.f.password.value)
      && this.personalTerms
      && !this.isNotEnoughYears
  }

  private isValidEmail(email: string): boolean {
    return this.emailRegExp.test(email);
  }

  public isValidPassword(password: string): boolean {
    if (password && password.length > 0) {
      this.updateErrorFlagValues(password);
      if (this.isAnyPasswordError()) {
        this.isNotValidPassword = true; // isWhiteSpaceError был без этой записи
        return false;
      } else {
        this.isNotValidPassword = false;
        return true;
      }
    } else {
      this.setDefaultErrorFlagValues();
      return false;
    }
  }

  private setDefaultErrorFlagValues(): void {
    this.isWhiteSpaceError = false;
    this.isCharactersError = true;
    this.isLetterError = true;
    this.isNumberError = true;
    this.isRusLettersError = false;
  }

  private updateErrorFlagValues(password: string): void {
    this.isWhiteSpaceError = !this.testWhiteSpace.test(password);
    this.isCharactersError = !this.testSixCharter.test(password);
    this.isLetterError = !this.testOneLetter.test(password);
    this.isNumberError = !this.testOneDigit.test(password);
    this.isRusLettersError = this.testRusLetters.test(password);
  }

  public focusOutErrorChecking() {
    this.focusOutPasswordErrors = this.isAnyPasswordError();
  }

  // true - one or more password errors
  private isAnyPasswordError(): boolean {
    return this.isCharactersError || this.isLetterError || this.isNumberError || this.isRusLettersError || this.isWhiteSpaceError;
  }

  public additionEnable() {
    this.addition = !this.addition;
  }

  public checkFormatEmail(event): void {
    if (event) {
      this.checkEmail = this.emailRegExp.test(this.f.email.value);
    }
  }

  public checkFormatDate(event): void {
    if (event) {
      this.checkBirthdayDate(true);
      this.checkBirthday = true;
    }
  }

  // REGIONS METHODS

  async setRegion(obj: IRegion) {
    if (obj != this.selectedRegion) {
      this.f.city.setValue('');
      this.f.school.setValue('');
      this.f.schoolClassNumber.setValue('');
      this.f.schoolClassLetter.setValue('');
      this.f.schoolClass.setValue('');

      this.regionCities = this.cities.filter(city => city.regionId === obj.id);
    }
    this.f.region.setValue(obj.name);
    this.selectedRegion = obj;
  }

  getSelectedRegionName(): string {
    if (this.selectedRegion) {
      return this.selectedRegion.name;
    }
  }

  fieldFocusRegion(e) {
    if (this.f.region.value) {
      this.f.region.setValue('');
    }
  }

  fieldFocusOutRegion(e) {
    if (this.selectedRegion) { // выбран регион
      if (this.selectedRegion.name !== this.f.region.value) { // в строку ввели другое значение
        this.selectedRegion = null;
        this.f.city.setValue('');
        this.selectedCity = null;
      }
    }
  }

  // CITIES METHODS

  setCity(obj: ICity): void {
    if (obj != this.selectedCity) {
      this.f.school.setValue('');
      this.f.schoolClassNumber.setValue('');
      this.f.schoolClassLetter.setValue('');
      this.f.schoolClass.setValue('');
      this.searchSchoolName = null;
      this.schoolsFiltered = this.schools.filter(school => school.city === obj.name); // сортировка идет по названию города -> считаем, что нет городов с одинаковым названием
    }
    this.f.city.setValue(obj.name);
    this.selectedCity = obj;
  }

  getSelectedCityName() {
    if (this.selectedCity) {
      return this.selectedCity.name;
    }
  }

  fieldFocusCity(e) {
    if (this.f.city.value) {
      this.f.city.setValue('');
    }
  }

  fieldFocusOutCity(e) {
    if (this.selectedCity) { // выбран город
      if (this.selectedCity.name !== this.f.city.value) { // в строку ввели другое значение
        this.selectedCity = null;
        this.f.school.setValue('');
        this.schoolID = null;
        this.selectedSchoolName = null;
      }
    }
  }

  // SCHOOLS METHODS

  setSchool(school) {
    if (school.id != this.schoolID) {
      this.f.schoolClassNumber.setValue('');
      this.f.schoolClassLetter.setValue('');
      this.f.schoolClass.setValue('');
    }
    this.schoolID = school.id;
    this.getSchoolClassBySchool(this.schoolID);
    this.f.school.setValue(school.viewValue);
    this.selectedSchoolName = school.viewValue;
  }

  fieldFocusSchool(e) {
    if (this.f.school.value) {
      this.f.school.setValue('');
    }
  }

  fieldFocusOutSchool(e) {
    const pipe = this.filterSchoolsPipe.transform(this.schoolsFiltered, this.searchSchoolName);
    if (!this.schoolsFiltered.some(t => t.value === this.f.school.value) && pipe.length == 0) {
      this.f.school.setValue('');
    }
  }

  // CLASS NUMBER METHODS

  // obj - complex object or string
  setNumber(obj: any = {}, isClasse?: boolean) {
    this.f.schoolClassNumber.setValue('');
    this.f.schoolClassLetter.setValue('');
    this.f.schoolClass.setValue('');
    if (isClasse) {
      this.f.schoolClassNumber.setValue(obj.number);
      this.f.schoolClassLetter.setValue(obj.letter);
      this.f.schoolClass.setValue(obj.number + obj.letter);
    } else {
      this.f.schoolClassNumber.setValue(obj.value);
    }
  }

  fieldFocusNumber(e, classe?: boolean): void {
    if (classe) {
      if (this.f.schoolClassNumber.value || this.f.schoolClassLetter.value) {
        this.f.schoolClassNumber.setValue('');
        this.f.schoolClassLetter.setValue('');
        this.f.schoolClass.setValue('');
      }
    } else {
      if (this.f.schoolClassNumber.value) {
        this.f.schoolClassNumber.setValue('');
      }
    }
  }

  fieldFocusOutNumber(e, classe?: boolean) {
    if (classe) {
      const schoolClass = this.classes.filter((c: SchoolClassesClass) =>
        c.number == this.f.schoolClassNumber.value ||
        c.letter.toLocaleLowerCase().indexOf(this.f.schoolClassLetter.value) !== -1);
      if (schoolClass.length == 0) {
        this.f.schoolClassNumber.setValue('');
        this.f.schoolClassLetter.setValue('');
        this.f.schoolClass.setValue('');
      }
    } else {
      if (!this.numbersClass.some(t => t.value === this.f.schoolClassNumber.value)) {
        return this.f.schoolClassNumber.setValue('');
      }
    }
  }

  // CLASS LETTER METHODS

  setLetter(letter: any = {}) {
    this.f.schoolClassLetter.setValue(letter.value);
  }

  fieldFocusLetter(e): void {
    if (this.f.schoolClassLetter.value) {
      this.f.schoolClassLetter.setValue('');
    }
  }

  fieldFocusOutLetter(e) {
    if (!this.lettersClass.some(t => t.value === this.f.schoolClassLetter.value)) {
      this.f.schoolClassLetter.setValue('');
    }
  }

  @HostListener('document:click', ['$event.target'])
  checkClick(target) {
    this.showRegionControl(target);
    if (this.selectedRegion) {
      this.showCityControl(target);
      if (this.selectedCity) {
        this.showSchoolControl(target);
        if (this.isClasses) {
          this.showFullClassNameControl(target);
        } else if (this.selectedSchoolName) {
          this.showClassNumberControl(target);
          this.showClassLetterControl(target);
        }
      }
    }
  }

  private showRegionControl(target: any): void {
    if (!this.regionFilter.nativeElement.contains(target)) {
      this.regionDrop.nativeElement.classList.remove('w--open');
      this.regionField.nativeElement.classList.remove('opened');
    }
  }

  private showCityControl(target: any): void {
    if (!this.cityFilter.nativeElement.contains(target)) {
      this.cityDrop.nativeElement.classList.remove('w--open');
      this.cityField.nativeElement.classList.remove('opened');
    }
  }

  private showSchoolControl(target: any): void {
    if (!this.schoolFilter.nativeElement.contains(target)) {
      this.schoolDrop.nativeElement.classList.remove('w--open');
      this.schoolField.nativeElement.classList.remove('opened');
    }
  }

  private showFullClassNameControl(target: any): void {
    if (!this.classesFilter.nativeElement.contains(target)) {
      this.classesDrop.nativeElement.classList.remove('w--open');
      this.classesField.nativeElement.classList.remove('opened');
    }
  }

  private showClassNumberControl(target: any): void {
    if (!this.numberFilter.nativeElement.contains(target)) {
      this.numberDrop.nativeElement.classList.remove('w--open');
      this.numberField.nativeElement.classList.remove('opened');
    }
  }

  private showClassLetterControl(target: any): void {
    if (!this.letterFilter.nativeElement.contains(target)) {
      this.letterDrop.nativeElement.classList.remove('w--open');
      this.letterField.nativeElement.classList.remove('opened');
    }
  }
}
